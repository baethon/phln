{!! '<?'.'php' !!}
declare(strict_types=1);

// Static wrapper for all phln functions/consts
// DO NOT EDIT THIS FILE
// it was generated by create:bundle command

namespace phln;

/**
@foreach($functions as $item)
 * @method static {{ $item['returnType'] }} {{ $item['name'] }}({!! $item['parameters']['definition'] !!})
@endforeach
 */
final class Phln
{
@foreach($constants as $item)
    const {{ $item['name'] }} = \{{ $item['fqn'] }};
@endforeach

    public static function __callStatic($name, $args)
    {
        $constName = sprintf('%s::%s', __CLASS__, $name);

        if (false === defined($constName)) {
            throw new \BadMethodCallException("Call to unknown method {$name}()");
        }

        $fn = constant($constName);

        return $fn(...$args);
    }
}
